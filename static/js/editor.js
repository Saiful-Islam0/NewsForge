// TinyMCE integration for article editor
document.addEventListener('DOMContentLoaded', function() {
  // Initialize TinyMCE if the content editor exists
  if (document.querySelector('#content')) {
    tinymce.init({
      selector: '#content',
      plugins: [
        'advlist', 'autolink', 'lists', 'link', 'image', 'charmap', 'preview',
        'anchor', 'searchreplace', 'visualblocks', 'code', 'fullscreen',
        'insertdatetime', 'media', 'table', 'help', 'wordcount'
      ],
      toolbar: 'undo redo | blocks | ' +
        'bold italic backcolor | alignleft aligncenter ' +
        'alignright alignjustify | bullist numlist outdent indent | ' +
        'removeformat | help',
      menubar: 'file edit view insert format tools table help',
      content_style: `
        body {
          font-family: 'Source Sans Pro', system-ui, -apple-system, sans-serif;
          font-size: 16px;
          line-height: 1.6;
          padding: 20px;
        }
        h1, h2, h3, h4, h5, h6 {
          font-family: 'Merriweather', Georgia, serif;
          font-weight: 700;
          line-height: 1.3;
          margin-bottom: 16px;
        }
        p { margin-bottom: 16px; }
        img { max-width: 100%; height: auto; }
      `,
      height: 500,
      image_caption: true,
      image_advtab: true,
      file_picker_callback: function(callback, value, meta) {
        // Provide image and file selection capability
        if (meta.filetype === 'image') {
          var input = document.createElement('input');
          input.setAttribute('type', 'file');
          input.setAttribute('accept', 'image/*');
          
          input.onchange = function() {
            var file = this.files[0];
            
            // Create a notification to show upload progress
            const notification = document.createElement('div');
            notification.className = 'tox-notification';
            notification.innerHTML = '<p>Uploading image...</p>';
            document.body.appendChild(notification);
            
            // You would normally upload the file to your server here
            // For the sake of this example, we'll simulate a successful upload
            // In a real application, you would use an AJAX request to upload the file
            
            // Show a message once the mock upload "completes"
            setTimeout(function() {
              // Remove the notification
              document.body.removeChild(notification);
              
              // In a real application, you would get the URL from the server response
              // Here we're just showing a message that this is a demo
              alert('In a real application, this would upload the file to your server and return the URL. Please use the Media Library to upload images.');
            }, 2000);
          };
          
          input.click();
        }
      },
      setup: function(editor) {
        // Add custom buttons or functionality here
        editor.on('change', function() {
          // Trigger change event to ensure form data is updated
          editor.save();
        });
      }
    });
  }
  
  // Handle slug generation
  const titleInput = document.querySelector('#title');
  const slugInput = document.querySelector('#slug');
  
  if (titleInput && slugInput) {
    titleInput.addEventListener('blur', function() {
      // Only generate slug if it's empty or hasn't been manually changed
      if (!slugInput.value || slugInput.dataset.autoGenerated === 'true') {
        const title = this.value;
        // Convert to lowercase, replace spaces with hyphens, remove special chars
        let slug = title.toLowerCase()
          .replace(/[^\w\s-]/g, '')  // Remove special characters
          .replace(/\s+/g, '-')      // Replace spaces with hyphens
          .replace(/-+/g, '-')       // Replace multiple hyphens with single hyphen
          .trim();                   // Trim whitespace from ends
        
        slugInput.value = slug;
        slugInput.dataset.autoGenerated = 'true';
      }
    });
    
    // When slug is manually edited, stop auto-generation
    slugInput.addEventListener('input', function() {
      this.dataset.autoGenerated = 'false';
    });
  }
  
  // Handle meta title generation from main title
  const metaTitleInput = document.querySelector('#meta_title');
  
  if (titleInput && metaTitleInput) {
    titleInput.addEventListener('blur', function() {
      // Only auto-fill if meta title is empty
      if (!metaTitleInput.value) {
        metaTitleInput.value = this.value;
      }
    });
  }
  
  // Handle scheduled publishing date/time
  const statusSelect = document.querySelector('#status');
  const publishDateContainer = document.querySelector('#publish-date-container');
  
  if (statusSelect && publishDateContainer) {
    statusSelect.addEventListener('change', function() {
      if (this.value === 'scheduled') {
        publishDateContainer.style.display = 'block';
      } else {
        publishDateContainer.style.display = 'none';
      }
    });
    
    // Initial state
    if (statusSelect.value === 'scheduled') {
      publishDateContainer.style.display = 'block';
    } else {
      publishDateContainer.style.display = 'none';
    }
  }
  
  // Tags input handling (comma-separated)
  const tagsInput = document.querySelector('#tags');
  
  if (tagsInput) {
    tagsInput.addEventListener('keydown', function(e) {
      if (e.key === ',') {
        // Validate the tag (optional)
        const tagValue = this.value.trim();
        if (tagValue) {
          // You could add tag validation here
          // For example, ensure tags are at least 2 characters long
        }
      }
    });
  }
  
  // Featured image preview
  const featuredImageInput = document.querySelector('#featured_image');
  const featuredImageUrlInput = document.querySelector('#featured_image_url');
  const imagePreviewContainer = document.querySelector('#image-preview');
  
  if (featuredImageInput && imagePreviewContainer) {
    featuredImageInput.addEventListener('change', function() {
      if (this.files && this.files[0]) {
        const reader = new FileReader();
        
        reader.onload = function(e) {
          imagePreviewContainer.innerHTML = `
            <div class="preview-image-container">
              <img src="${e.target.result}" alt="Preview" class="preview-image">
              <button type="button" class="remove-image-btn btn btn-sm btn-danger">
                <i class="fas fa-times"></i> Remove
              </button>
            </div>
          `;
          
          // Add event listener to remove button
          document.querySelector('.remove-image-btn').addEventListener('click', function() {
            featuredImageInput.value = '';
            imagePreviewContainer.innerHTML = '';
          });
        };
        
        reader.readAsDataURL(this.files[0]);
      }
    });
  }
  
  // Handle image URL input
  if (featuredImageUrlInput && imagePreviewContainer) {
    featuredImageUrlInput.addEventListener('blur', function() {
      if (this.value) {
        imagePreviewContainer.innerHTML = `
          <div class="preview-image-container">
            <img src="${this.value}" alt="Preview" class="preview-image">
            <button type="button" class="remove-image-btn btn btn-sm btn-danger">
              <i class="fas fa-times"></i> Remove
            </button>
          </div>
        `;
        
        // Add event listener to remove button
        document.querySelector('.remove-image-btn').addEventListener('click', function() {
          featuredImageUrlInput.value = '';
          imagePreviewContainer.innerHTML = '';
        });
      }
    });
  }
  
  // Article version history
  const versionHistoryBtn = document.querySelector('#version-history-btn');
  const versionHistoryModal = document.querySelector('#version-history-modal');
  
  if (versionHistoryBtn && versionHistoryModal) {
    versionHistoryBtn.addEventListener('click', function() {
      // Toggle version history panel
      versionHistoryModal.classList.toggle('show');
    });
    
    // Close modal when clicking outside
    window.addEventListener('click', function(e) {
      if (e.target === versionHistoryModal) {
        versionHistoryModal.classList.remove('show');
      }
    });
  }
});
